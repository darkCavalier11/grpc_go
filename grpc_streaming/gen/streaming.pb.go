// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.19.2
// source: grpc_streaming/streaming.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SimpleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Request string `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty"`
}

func (x *SimpleRequest) Reset() {
	*x = SimpleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_streaming_streaming_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SimpleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SimpleRequest) ProtoMessage() {}

func (x *SimpleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_streaming_streaming_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SimpleRequest.ProtoReflect.Descriptor instead.
func (*SimpleRequest) Descriptor() ([]byte, []int) {
	return file_grpc_streaming_streaming_proto_rawDescGZIP(), []int{0}
}

func (x *SimpleRequest) GetRequest() string {
	if x != nil {
		return x.Request
	}
	return ""
}

type SimpleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response string `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *SimpleResponse) Reset() {
	*x = SimpleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_streaming_streaming_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SimpleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SimpleResponse) ProtoMessage() {}

func (x *SimpleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_streaming_streaming_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SimpleResponse.ProtoReflect.Descriptor instead.
func (*SimpleResponse) Descriptor() ([]byte, []int) {
	return file_grpc_streaming_streaming_proto_rawDescGZIP(), []int{1}
}

func (x *SimpleResponse) GetResponse() string {
	if x != nil {
		return x.Response
	}
	return ""
}

var File_grpc_streaming_streaming_proto protoreflect.FileDescriptor

var file_grpc_streaming_streaming_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67,
	0x2f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x10, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69,
	0x6e, 0x67, 0x22, 0x29, 0x0a, 0x0d, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x2c, 0x0a,
	0x0e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x72, 0x0a, 0x16, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x58, 0x0a, 0x0f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x12, 0x1f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x69, 0x6d, 0x70,
	0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x69, 0x6d,
	0x70, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x32,
	0x72, 0x0a, 0x16, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69,
	0x6e, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x58, 0x0a, 0x0f, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x12, 0x1f, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x2e,
	0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67,
	0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x28, 0x01, 0x32, 0x82, 0x01, 0x0a, 0x1d, 0x42, 0x69, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x61, 0x0a, 0x16, 0x42, 0x69, 0x44, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x12,
	0x1f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69,
	0x6e, 0x67, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x20, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x69, 0x6e, 0x67, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x42, 0x14, 0x5a, 0x12, 0x67, 0x72, 0x70, 0x63,
	0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x2f, 0x67, 0x65, 0x6e, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_grpc_streaming_streaming_proto_rawDescOnce sync.Once
	file_grpc_streaming_streaming_proto_rawDescData = file_grpc_streaming_streaming_proto_rawDesc
)

func file_grpc_streaming_streaming_proto_rawDescGZIP() []byte {
	file_grpc_streaming_streaming_proto_rawDescOnce.Do(func() {
		file_grpc_streaming_streaming_proto_rawDescData = protoimpl.X.CompressGZIP(file_grpc_streaming_streaming_proto_rawDescData)
	})
	return file_grpc_streaming_streaming_proto_rawDescData
}

var file_grpc_streaming_streaming_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_grpc_streaming_streaming_proto_goTypes = []interface{}{
	(*SimpleRequest)(nil),  // 0: server_streaming.SimpleRequest
	(*SimpleResponse)(nil), // 1: server_streaming.SimpleResponse
}
var file_grpc_streaming_streaming_proto_depIdxs = []int32{
	0, // 0: server_streaming.ServerStreamingService.ServerStreaming:input_type -> server_streaming.SimpleRequest
	0, // 1: server_streaming.ClientStreamingService.ClientStreaming:input_type -> server_streaming.SimpleRequest
	0, // 2: server_streaming.BiDirectionalStreamingService.BiDirectionalStreaming:input_type -> server_streaming.SimpleRequest
	1, // 3: server_streaming.ServerStreamingService.ServerStreaming:output_type -> server_streaming.SimpleResponse
	1, // 4: server_streaming.ClientStreamingService.ClientStreaming:output_type -> server_streaming.SimpleResponse
	1, // 5: server_streaming.BiDirectionalStreamingService.BiDirectionalStreaming:output_type -> server_streaming.SimpleResponse
	3, // [3:6] is the sub-list for method output_type
	0, // [0:3] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_grpc_streaming_streaming_proto_init() }
func file_grpc_streaming_streaming_proto_init() {
	if File_grpc_streaming_streaming_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_grpc_streaming_streaming_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SimpleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_streaming_streaming_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SimpleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_grpc_streaming_streaming_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   3,
		},
		GoTypes:           file_grpc_streaming_streaming_proto_goTypes,
		DependencyIndexes: file_grpc_streaming_streaming_proto_depIdxs,
		MessageInfos:      file_grpc_streaming_streaming_proto_msgTypes,
	}.Build()
	File_grpc_streaming_streaming_proto = out.File
	file_grpc_streaming_streaming_proto_rawDesc = nil
	file_grpc_streaming_streaming_proto_goTypes = nil
	file_grpc_streaming_streaming_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ServerStreamingServiceClient is the client API for ServerStreamingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ServerStreamingServiceClient interface {
	ServerStreaming(ctx context.Context, in *SimpleRequest, opts ...grpc.CallOption) (ServerStreamingService_ServerStreamingClient, error)
}

type serverStreamingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewServerStreamingServiceClient(cc grpc.ClientConnInterface) ServerStreamingServiceClient {
	return &serverStreamingServiceClient{cc}
}

func (c *serverStreamingServiceClient) ServerStreaming(ctx context.Context, in *SimpleRequest, opts ...grpc.CallOption) (ServerStreamingService_ServerStreamingClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ServerStreamingService_serviceDesc.Streams[0], "/server_streaming.ServerStreamingService/ServerStreaming", opts...)
	if err != nil {
		return nil, err
	}
	x := &serverStreamingServiceServerStreamingClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ServerStreamingService_ServerStreamingClient interface {
	Recv() (*SimpleResponse, error)
	grpc.ClientStream
}

type serverStreamingServiceServerStreamingClient struct {
	grpc.ClientStream
}

func (x *serverStreamingServiceServerStreamingClient) Recv() (*SimpleResponse, error) {
	m := new(SimpleResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ServerStreamingServiceServer is the server API for ServerStreamingService service.
type ServerStreamingServiceServer interface {
	ServerStreaming(*SimpleRequest, ServerStreamingService_ServerStreamingServer) error
}

// UnimplementedServerStreamingServiceServer can be embedded to have forward compatible implementations.
type UnimplementedServerStreamingServiceServer struct {
}

func (*UnimplementedServerStreamingServiceServer) ServerStreaming(*SimpleRequest, ServerStreamingService_ServerStreamingServer) error {
	return status.Errorf(codes.Unimplemented, "method ServerStreaming not implemented")
}

func RegisterServerStreamingServiceServer(s *grpc.Server, srv ServerStreamingServiceServer) {
	s.RegisterService(&_ServerStreamingService_serviceDesc, srv)
}

func _ServerStreamingService_ServerStreaming_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SimpleRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ServerStreamingServiceServer).ServerStreaming(m, &serverStreamingServiceServerStreamingServer{stream})
}

type ServerStreamingService_ServerStreamingServer interface {
	Send(*SimpleResponse) error
	grpc.ServerStream
}

type serverStreamingServiceServerStreamingServer struct {
	grpc.ServerStream
}

func (x *serverStreamingServiceServerStreamingServer) Send(m *SimpleResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _ServerStreamingService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "server_streaming.ServerStreamingService",
	HandlerType: (*ServerStreamingServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ServerStreaming",
			Handler:       _ServerStreamingService_ServerStreaming_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "grpc_streaming/streaming.proto",
}

// ClientStreamingServiceClient is the client API for ClientStreamingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ClientStreamingServiceClient interface {
	ClientStreaming(ctx context.Context, opts ...grpc.CallOption) (ClientStreamingService_ClientStreamingClient, error)
}

type clientStreamingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewClientStreamingServiceClient(cc grpc.ClientConnInterface) ClientStreamingServiceClient {
	return &clientStreamingServiceClient{cc}
}

func (c *clientStreamingServiceClient) ClientStreaming(ctx context.Context, opts ...grpc.CallOption) (ClientStreamingService_ClientStreamingClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ClientStreamingService_serviceDesc.Streams[0], "/server_streaming.ClientStreamingService/ClientStreaming", opts...)
	if err != nil {
		return nil, err
	}
	x := &clientStreamingServiceClientStreamingClient{stream}
	return x, nil
}

type ClientStreamingService_ClientStreamingClient interface {
	Send(*SimpleRequest) error
	CloseAndRecv() (*SimpleResponse, error)
	grpc.ClientStream
}

type clientStreamingServiceClientStreamingClient struct {
	grpc.ClientStream
}

func (x *clientStreamingServiceClientStreamingClient) Send(m *SimpleRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *clientStreamingServiceClientStreamingClient) CloseAndRecv() (*SimpleResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(SimpleResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ClientStreamingServiceServer is the server API for ClientStreamingService service.
type ClientStreamingServiceServer interface {
	ClientStreaming(ClientStreamingService_ClientStreamingServer) error
}

// UnimplementedClientStreamingServiceServer can be embedded to have forward compatible implementations.
type UnimplementedClientStreamingServiceServer struct {
}

func (*UnimplementedClientStreamingServiceServer) ClientStreaming(ClientStreamingService_ClientStreamingServer) error {
	return status.Errorf(codes.Unimplemented, "method ClientStreaming not implemented")
}

func RegisterClientStreamingServiceServer(s *grpc.Server, srv ClientStreamingServiceServer) {
	s.RegisterService(&_ClientStreamingService_serviceDesc, srv)
}

func _ClientStreamingService_ClientStreaming_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ClientStreamingServiceServer).ClientStreaming(&clientStreamingServiceClientStreamingServer{stream})
}

type ClientStreamingService_ClientStreamingServer interface {
	SendAndClose(*SimpleResponse) error
	Recv() (*SimpleRequest, error)
	grpc.ServerStream
}

type clientStreamingServiceClientStreamingServer struct {
	grpc.ServerStream
}

func (x *clientStreamingServiceClientStreamingServer) SendAndClose(m *SimpleResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *clientStreamingServiceClientStreamingServer) Recv() (*SimpleRequest, error) {
	m := new(SimpleRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _ClientStreamingService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "server_streaming.ClientStreamingService",
	HandlerType: (*ClientStreamingServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ClientStreaming",
			Handler:       _ClientStreamingService_ClientStreaming_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "grpc_streaming/streaming.proto",
}

// BiDirectionalStreamingServiceClient is the client API for BiDirectionalStreamingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BiDirectionalStreamingServiceClient interface {
	BiDirectionalStreaming(ctx context.Context, opts ...grpc.CallOption) (BiDirectionalStreamingService_BiDirectionalStreamingClient, error)
}

type biDirectionalStreamingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBiDirectionalStreamingServiceClient(cc grpc.ClientConnInterface) BiDirectionalStreamingServiceClient {
	return &biDirectionalStreamingServiceClient{cc}
}

func (c *biDirectionalStreamingServiceClient) BiDirectionalStreaming(ctx context.Context, opts ...grpc.CallOption) (BiDirectionalStreamingService_BiDirectionalStreamingClient, error) {
	stream, err := c.cc.NewStream(ctx, &_BiDirectionalStreamingService_serviceDesc.Streams[0], "/server_streaming.BiDirectionalStreamingService/BiDirectionalStreaming", opts...)
	if err != nil {
		return nil, err
	}
	x := &biDirectionalStreamingServiceBiDirectionalStreamingClient{stream}
	return x, nil
}

type BiDirectionalStreamingService_BiDirectionalStreamingClient interface {
	Send(*SimpleRequest) error
	Recv() (*SimpleResponse, error)
	grpc.ClientStream
}

type biDirectionalStreamingServiceBiDirectionalStreamingClient struct {
	grpc.ClientStream
}

func (x *biDirectionalStreamingServiceBiDirectionalStreamingClient) Send(m *SimpleRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *biDirectionalStreamingServiceBiDirectionalStreamingClient) Recv() (*SimpleResponse, error) {
	m := new(SimpleResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BiDirectionalStreamingServiceServer is the server API for BiDirectionalStreamingService service.
type BiDirectionalStreamingServiceServer interface {
	BiDirectionalStreaming(BiDirectionalStreamingService_BiDirectionalStreamingServer) error
}

// UnimplementedBiDirectionalStreamingServiceServer can be embedded to have forward compatible implementations.
type UnimplementedBiDirectionalStreamingServiceServer struct {
}

func (*UnimplementedBiDirectionalStreamingServiceServer) BiDirectionalStreaming(BiDirectionalStreamingService_BiDirectionalStreamingServer) error {
	return status.Errorf(codes.Unimplemented, "method BiDirectionalStreaming not implemented")
}

func RegisterBiDirectionalStreamingServiceServer(s *grpc.Server, srv BiDirectionalStreamingServiceServer) {
	s.RegisterService(&_BiDirectionalStreamingService_serviceDesc, srv)
}

func _BiDirectionalStreamingService_BiDirectionalStreaming_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BiDirectionalStreamingServiceServer).BiDirectionalStreaming(&biDirectionalStreamingServiceBiDirectionalStreamingServer{stream})
}

type BiDirectionalStreamingService_BiDirectionalStreamingServer interface {
	Send(*SimpleResponse) error
	Recv() (*SimpleRequest, error)
	grpc.ServerStream
}

type biDirectionalStreamingServiceBiDirectionalStreamingServer struct {
	grpc.ServerStream
}

func (x *biDirectionalStreamingServiceBiDirectionalStreamingServer) Send(m *SimpleResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *biDirectionalStreamingServiceBiDirectionalStreamingServer) Recv() (*SimpleRequest, error) {
	m := new(SimpleRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _BiDirectionalStreamingService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "server_streaming.BiDirectionalStreamingService",
	HandlerType: (*BiDirectionalStreamingServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "BiDirectionalStreaming",
			Handler:       _BiDirectionalStreamingService_BiDirectionalStreaming_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "grpc_streaming/streaming.proto",
}
